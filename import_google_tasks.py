"""Import tasks from today_view.csv into Google Tasks.

This script reads the CSV generated by extract_tasks.py and inserts each
entry as a task in Google Tasks using OAuth 2.0 credentials.

Credentials are read from ``credentials.json`` (downloaded from Google Cloud
Console) and the authorization token is stored in ``token.json``.
"""

from __future__ import annotations

import csv
import os
from typing import List, Dict, Optional, Any

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

SCOPES = ["https://www.googleapis.com/auth/tasks"]
CSV_FILE = "today_view.csv"
TOKEN_FILE = "token.json"
CREDENTIALS_FILE = "credentials.json"

# Utility to canonicalise titles for reliable comparison

def canonTitle(title: str) -> str:  # noqa: N802 (keep camelCase rule)
    """Return a canonical representation of a task title.

    Strips leading/trailing whitespace, collapses internal whitespace, and
    converts to lowercase so comparisons are case-insensitive. Emojis and
    other Unicode characters are left intact.
    """
    return " ".join(title.strip().split()).lower()

def getService() -> Any:
    """Authorize the user and return a Google Tasks service instance."""
    creds: Any = None
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)

    # Refresh or request new credentials if necessary
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(TOKEN_FILE, "w") as token:
            assert creds is not None
            token.write(creds.to_json())

    return build("tasks", "v1", credentials=creds)


def readTasksFromCsv(filename: str) -> List[Dict[str, Optional[str]]]:
    """Read tasks from a Things3 today_view.csv file."""
    tasks: List[Dict[str, Optional[str]]] = []
    with open(filename, newline="", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            title: str = row.get("ItemName", "").strip('"')
            notes: str = row.get("Notes", "").strip('"')
            due_raw: str = row.get("DueDate", "").strip('"')
            due: Optional[str] = due_raw + "T00:00:00.000Z" if due_raw else None
            tasks.append({"title": title, "notes": notes, "due": due})
    return tasks


def syncTasks(service: Any, tasklist_id: str, csv_tasks: List[Dict[str, Optional[str]]]) -> None:
    """Synchronise Google Tasks list with tasks from CSV.

    1. Insert or update tasks that exist in the CSV but not in Google Tasks.
    2. Delete tasks from Google Tasks that are no longer present in the CSV.
    """

    # Build a mapping of existing Google Tasks (canonical title -> id)
    existing_tasks_response = service.tasks().list(tasklist=tasklist_id).execute()
    google_tasks: Dict[str, Dict[str, Any]] = {}
    for item in existing_tasks_response.get("items", []):
        title_existing: str = str(item.get("title", ""))
        google_tasks[canonTitle(title_existing)] = {
            "id": item.get("id", ""),
            "due": item.get("due"),
            "notes": item.get("notes") or "",
        }

    csv_titles_canonical: set[str] = set(
        canonTitle(str(task["title"])) for task in csv_tasks if task["title"] is not None
    )

    # Insert missing tasks
    for task in csv_tasks:
        title_current: str = str(task["title"])
        canonical_current: str = canonTitle(title_current)
        if canonical_current in google_tasks:
            existing_info = google_tasks[canonical_current]
            body_update: Dict[str, Any] = {}
            # Compare due date
            if task["due"] and task["due"] != existing_info["due"]:
                body_update["due"] = task["due"]
            # Compare notes
            if task["notes"] and task["notes"] != existing_info["notes"]:
                body_update["notes"] = task["notes"]
            if body_update:
                service.tasks().patch(
                    tasklist=tasklist_id,
                    task=existing_info["id"],
                    body=body_update,
                ).execute()
                print("Updated task: " + title_current)
            else:
                print("Skipping existing task (no changes): " + title_current)
            continue

        body: Dict[str, Any] = {"title": title_current}
        if task["notes"]:
            body["notes"] = task["notes"]
        if task["due"]:
            body["due"] = task["due"]
        service.tasks().insert(tasklist=tasklist_id, body=body).execute()
        print("Inserted task: " + title_current)

    # Remove tasks that are not in CSV
    for canonical_existing, info in google_tasks.items():
        if canonical_existing not in csv_titles_canonical:
            service.tasks().delete(tasklist=tasklist_id, task=info["id"]).execute()
            print("Deleted task with canonical title: " + canonical_existing)

    print("Google Tasks sync completed")


def main() -> None:
    if not os.path.exists(CSV_FILE):
        raise FileNotFoundError("CSV file not found: " + CSV_FILE)

    service = getService()
    tasks: List[Dict[str, Optional[str]]] = readTasksFromCsv(CSV_FILE)
    syncTasks(service, "@default", tasks)


if __name__ == "__main__":
    main()
