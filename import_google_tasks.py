"""Import tasks from today_view.csv into Google Tasks.

This script reads the CSV generated by extract_tasks.py and inserts each
entry as a task in Google Tasks using OAuth 2.0 credentials.

Credentials are read from ``credentials.json`` (downloaded from Google Cloud
Console) and the authorization token is stored in ``token.json``.
"""

from __future__ import annotations

import csv
import os
from typing import List, Dict, Optional

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

SCOPES = ["https://www.googleapis.com/auth/tasks"]
CSV_FILE = "today_view.csv"
TOKEN_FILE = "token.json"
CREDENTIALS_FILE = "credentials.json"


def get_service() -> "googleapiclient.discovery.Resource":
    """Authorize the user and return a Google Tasks service instance."""
    creds: Optional[Credentials] = None
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)

    # Refresh or request new credentials if necessary
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(TOKEN_FILE, "w") as token:
            token.write(creds.to_json())

    return build("tasks", "v1", credentials=creds)


def read_tasks_from_csv(filename: str) -> List[Dict[str, str]]:
    """Read tasks from a Things3 today_view.csv file."""
    tasks = []
    with open(filename, newline="", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            title = row.get("ItemName", "").strip('"')
            notes = row.get("Notes", "").strip('"')
            due_raw = row.get("DueDate", "").strip('"')
            due = f"{due_raw}T00:00:00.000Z" if due_raw else None
            tasks.append({"title": title, "notes": notes, "due": due})
    return tasks


def insert_tasks(service, tasklist_id: str, tasks: List[Dict[str, str]]) -> None:
    """Insert tasks into Google Tasks, skipping duplicates by title."""
    existing_titles = set()
    response = service.tasks().list(tasklist=tasklist_id).execute()
    for item in response.get("items", []):
        existing_titles.add(item.get("title"))

    for task in tasks:
        if task["title"] in existing_titles:
            print(f"Skipping existing task: {task['title']}")
            continue

        body = {"title": task["title"]}
        if task["notes"]:
            body["notes"] = task["notes"]
        if task["due"]:
            body["due"] = task["due"]
        service.tasks().insert(tasklist=tasklist_id, body=body).execute()
        print(f"Inserted task: {task['title']}")


def main() -> None:
    if not os.path.exists(CSV_FILE):
        raise FileNotFoundError(f"CSV file not found: {CSV_FILE}")

    service = get_service()
    tasks = read_tasks_from_csv(CSV_FILE)
    insert_tasks(service, "@default", tasks)


if __name__ == "__main__":
    main()
