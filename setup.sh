#!/bin/bash

# Setup script for Things3 Sync
# This script helps users configure the sync script

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Load existing config if it exists
if [ -f "config.sh" ]; then
    # Source config to get existing values
    . config.sh
    echo -e "${YELLOW}Found existing configuration. Current settings:${NC}"
    echo -e "EC2 Host: ${BLUE}${EC2_HOST}${NC}"
    echo -e "EC2 User: ${BLUE}${EC2_USER}${NC}"
    echo -e "SSH Key: ${BLUE}${EC2_KEY_PATH}${NC}"
    echo -e "Remote Dir: ${BLUE}${REMOTE_DIR}${NC}\n"
    
    read -p "Do you want to update these settings? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}Keeping existing configuration.${NC}"
        exit 0
    fi
    
    # Use existing values as defaults
    default_ec2_user="${EC2_USER}"
    default_ec2_host="${EC2_HOST}"
    default_ssh_key="${EC2_KEY_PATH}"
    default_remote_dir="${REMOTE_DIR}"
else
    # Default values for new setup
    default_ec2_user="ubuntu"
    default_ec2_host=""
    default_ssh_key="$HOME/.ssh/key-pair.pem"
    default_remote_dir="/home/ubuntu/things-api"
fi

echo -e "${YELLOW}=== Things3 Sync Setup ===${NC}\n"

# Get user input
echo -e "${GREEN}EC2 Configuration:${NC}"

read -p "EC2 Hostname/IP [${BLUE}${default_ec2_host}${NC}]: " ec2_host
ec2_host="${ec2_host:-$default_ec2_host}"

read -p "EC2 Username [${BLUE}${default_ec2_user}${NC}]: " ec2_user
ec2_user="${ec2_user:-$default_ec2_user}"

read -p "Path to SSH key [${BLUE}${default_ssh_key}${NC}]: " ssh_key
ssh_key="${ssh_key:-$default_ssh_key}"

read -p "Remote directory [${BLUE}${default_remote_dir}${NC}]: " remote_dir
remote_dir="${remote_dir:-$default_remote_dir}"

# Create backup of existing config if it exists
if [ -f "config.sh" ]; then
    backup_name="config.sh.backup.$(date +%Y%m%d_%H%M%S)"
    cp config.sh "$backup_name"
    echo -e "${YELLOW}Backed up existing config to $backup_name${NC}"
fi

# Create config file
cat > config.sh <<EOL
#!/bin/bash

# Configuration for Things3 Sync Script
# This file contains sensitive information - DO NOT COMMIT TO VERSION CONTROL
# Generated by setup.sh on $(date)


# ===== REQUIRED SETTINGS =====

# EC2 Connection
EC2_USER="${ec2_user}"                     # SSH username for EC2
EC2_HOST="${ec2_host}"                     # EC2 instance hostname or IP
EC2_KEY_PATH="${ssh_key//\~/$HOME}"        # Path to SSH private key
REMOTE_DIR="${remote_dir}"                 # Directory on EC2 for synced files

# ===== LOCAL SETTINGS =====

# Path to Things3 database (default for macOS)
THINGS_DB="\$HOME/Library/Group Containers/JLMPQHK86H.com.culturedcode.ThingsMac/ThingsData-BQ2NY/Things Database.thingsdatabase/main.sqlite"

# Local directories
BACKUP_DIR="\$HOME/ThingsBackups"          # Local directory for database backups
SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" && pwd)"  # Directory of this script
LOG_FILE="\$SCRIPT_DIR/things_sync.log"     # Log file location

# ===== SYNC SETTINGS =====

# Both database and Today view syncs run every 60 seconds
# in sequence (first Today view, then database)

# File names (usually don't need to change)
LOCAL_CSV="today_view.csv"
EXTRACT_SCRIPT="extract_today_tasks_simple.py"
REMOTE_DB="\$REMOTE_DIR/db/things_db.sqlite"
REMOTE_CSV="\$REMOTE_DIR/today_view.csv"

# ===== EXPORT VARIABLES =====
# (Don't modify these directly)

# Export all variables for use in other scripts
export THINGS_DB BACKUP_DIR LOCAL_CSV EXTRACT_SCRIPT SCRIPT_DIR LOG_FILE \
       EC2_USER EC2_HOST EC2_KEY_PATH REMOTE_DIR REMOTE_DB REMOTE_CSV
EOL

# Make config file executable
chmod +x config.sh

# Create necessary directories
mkdir -p "$HOME/ThingsBackups"
mkdir -p "$(dirname "${ssh_key//\~/$HOME}")" 2>/dev/null || true

# Set secure permissions
chmod 700 "$HOME/ThingsBackups"
chmod 755 "$(dirname "${ssh_key//\~/$HOME}")" 2>/dev/null || true

# Create archive directory if it doesn't exist
mkdir -p archive

echo -e "\n${GREEN}✓ Configuration saved to config.sh${NC}"

echo -e "\n${YELLOW}Next steps:${NC}"
echo "1. Review the configuration in config.sh"
echo "2. Make sure the sync script is executable:"
echo "   ${BLUE}chmod +x sync_things.sh${NC}"
echo "3. Test the sync manually:"
echo "   ${BLUE}./sync_things.sh${NC}"
echo "4. (Optional) Install the launch agent for automatic startup:"
echo "   ${BLUE}cp com.things3.sync.plist ~/Library/LaunchAgents/${NC}"
echo "   ${BLUE}launchctl load ~/Library/LaunchAgents/com.things3.sync.plist${NC}"

echo -e "\n${GREEN}✓ Setup complete!${NC}"
